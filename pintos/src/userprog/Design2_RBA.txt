		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Me: Robert Brandon Ault <rault@ksu.edu>
Connor Neil <cjneil@ksu.edu>
Jerry Rizzo <jrizzo@ksu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

https://github.com/ChristianJHughes/pintos-project2
https://github.com/st2092/pintos-user-programs
https://github.com/zaheersm/pintOS


			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static bool setup_stack (void **esp, char * cmdline);
We added an extra parameter (char * cmdline) since tokenization occurs here.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Argument parsing is done within setup_stack with the strtok_r function.
It iterates through each argument, with a delimiter of a space (" ").
On each loop, a variable "esp" is moved down by the length of the current
token + 1, so that if the current argument will be greater than this value,
argv[] is doubled in size and reallocated. Finally, a null pointer is added
at the end to signify the end of the arguments on the stack.
After that, all char * are pushed onto the stack in reverse order.
Overflow is avoided by limiting the number of possible arguments to 64. If
it were to go over, argv would be freed and we would be returned from this
function to notify the parent and exit.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
strtok() uses a global variable to track string position, whereas
strtok_r() does not. Because strtok() uses a global variable, it is
possible for multiple different threads to be using the same variable,
causing unexpected results. strtok_r() allows multiple threads to use
it independently.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
The Unix approach stops bad arguments from reaching the kernel, assuming
error checking is done within the shell. This also makes it easier to
interpret arguments in different ways without needing to change the kernel.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

in process.c:
struct child * get_child(tid_t,struct thread *);
//Gets the child of a process to be used in syscall.c and process.c itself.

in process.h:
struct child 
{
  tid_t id;
  int ret_val;
  int used;
  struct list_elem elem;
};
//Holds info about a child process for when the child returns data.

modifications to struct thread

int exit_code;
//Exit code

struct list file_list
//A list of open files that this process has

int fd_count
//used to give fds to new files

struct list children
//List of this thread's child processes using the child struct

struct thread * parent
//Stores reference to parent thread

bool loaded_flag
//Flag for when a child thread is loaded successfully

struct semaphore loaded_sema
//Semaphore to be used to force a parent to wait on its child to be able to start execution

struct file * file
//Stores reference to an executable file

struct semaphore child_wait_sema
//Used to force a parent to wait on its child

tid_t waitedon_child
//Stores the tid(pid) of the child being waited on

in syscall.h:

struct thread_file
{
  struct list_elem elem;
  struct file * file_addr;
  int fd;
};
//A struct for a file known to a thread that also maps the file descriptors
//to their address pointers.

struct lock lock_filesys;
//Locks a file to prevent access from multiple threads.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
Each thread has its own unique list of files of type thread_file. They also
have their own fd_count which is incremented on open. This causes them to have
unique file descriptors.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
We used STDIN for reading, and STDOUT for writing. We get the file pointers
from the thread_file list of the current thread, and place a lock on the file.
Finally, after using standard file.c functions to read and write to the file,
we release the lock.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
The "wait" system call calls process_wait. In this method, we get the child
from this process's child list, set the waitedon_child's tid to the child's tid,
while the parent waits on the child to exit, which would set it to 1. We then
wake the parent by upping its semaphore. We get the return value, remove and free
the child from the list, and return the value.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
We do this by checking to ensure that esp exists in page_dir and is
less than physbase. If the passed in address is invalid, we call exit(-1)
which calls process_exit, which in turn kills the process and frees everything
needed.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
In order to prevent this, we used a combination of a semaphore (loaded_sema) 
and a boolean flag (loaded_flag). The semaphore is downed by the parent after a new thread
is created within process_execute. Then within start_process, the loaded_flag will be toggled to true
or false dependent on whether the call to load was successful. This newly created thread then uses its 
reference to its parent to flip the semaphore back up. Additionally, the loaded_flag will be toggled to true
or false dependent on whether the call to load was successful. The parent then checks the flag to determine
whether to pass back -1 for a false loaded_flag signifying it did not load or the pid/tid of the thread it created.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
P calls wait(C) before C exits
P sets the id of waitedon_child so children know which it waits on. If the child->used is zero in
P's children list then it'll down child_wait_sema and wait. After C exits, child->used for it within
P's children list is set to 1 and child->ret is set to the exit code it is exiting with.
Lastly for the child, it checks if the waitedon_child id is equivalent to its own and if so toggles
the child_wait_sema up to wake the parent.
P then handles everything necessary such as grabbing the ret value from its children struct, removing the
child from its list, freeing memory, and returning the grabbed value.

P calls wait(C) after C exits
In this case the child will have already exited, thereby setting used to 1 and a return value within
the parent's child struct for it. The parent will simply retrieve that value and return it without sleeping
because the semaphore will never get toggled.

P terminates without waiting, before C exits
Since the child always checks the parents children list, it will see the empty list and simply exit
with no updates being made or needing to be made.

P terminates without waiting, after C exits
Nothing extraordinary happens and the parent simply frees the children list without using any of the values

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
Out of all the solutions we came up with, this was the one that worked.
It was also much simpler to do it our way.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
The nice thing is that descriptors are unique to their processes, so we do not
have to handle them on a global scale. However, because the counter for our
file descriptors (fd_count) does not decrement, you are not able to free resources
based on it.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
We did not change the default implementation.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
